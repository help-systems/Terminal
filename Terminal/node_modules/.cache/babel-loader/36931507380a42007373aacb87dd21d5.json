{"ast":null,"code":"var _jsxFileName = \"C:\\\\Help Systems\\\\terminal\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Login from \"./components/Login\";\nimport TodoTerminal from \"./components/TodoTerminal\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleUsernameInput = e => {\n      let user = this.state.user;\n      user.username = e.target.value;\n      this.setState({\n        user\n      });\n    };\n\n    this.handlePasswordInput = e => {\n      let user = this.state.user;\n      user.password = e.target.value;\n      this.setState({\n        user\n      });\n    };\n\n    this.inputGivenMoney = e => {\n      const givenmoney = e.target.value;\n      this.setState({\n        givenmoney\n      });\n    };\n\n    this.state = {\n      user: {\n        username: \"\",\n        password: \"\"\n      },\n      loginsituation: false,\n      products: [],\n      prod_count: 0,\n      product_trans: {},\n      givenmoney: \"\",\n      loginerror: false,\n      barcodes: {}\n    };\n    this.Login = this.Login.bind(this);\n    this.handleBarcodeInput = this.handleBarcodeInput.bind(this);\n    this.inputProductCount = this.inputProductCount.bind(this);\n    this.transactionDone = this.transactionDone.bind(this);\n  }\n\n  async handleBarcodeInput(key, e) {\n    console.log(e.key);\n    let barcode = e.target.value;\n    let products = this.state.products;\n    let product_trans = this.state.product_trans;\n    products.map(item => {\n      if (item.key === key) {\n        item.barcode = barcode;\n      }\n\n      return item;\n    });\n    this.setState({\n      products\n    });\n    this.setState({\n      barcodes: data\n    });\n\n    if (products[products.length - 1].barcode !== \"\") {\n      products[products.length] = {\n        key: products.length,\n        barcode: \"\",\n        count: \"\",\n        product_name: \"\",\n        supplier_Name: \"\",\n        selling_Price: \"\"\n      };\n    }\n\n    this.setState({\n      products\n    });\n  }\n\n  async Login() {\n    //  const user = this.state.user;\n    // console.log(JSON.stringify(this.state.user));\n    // const url = `http://localhost:58423/Terminal/Login/${JSON.stringify (this.state.user)}`;\n    // const settings = {\n    //   method: \"POST\",\n    //   headers: {\n    //       Accept: 'application/json',\n    //       'Content-Type': 'application/json',\n    //       'Access-Control-Allow-Origin': '*',\n    //       'Access-Control-Allow-Credentials': true,\n    //       'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, HEAD',\n    //       'Access-Control-Allow-Headers': 'origin, content-type, accept, authorization',\n    //    },\n    // //  redirect: 'follow', \n    // //  referrerPolicy: 'no-referrer',\n    //   body: `${this.state.user}`\n    // };\n    // const response = await fetch(url,settings);\n    // // .catch((error)=>{\n    // //   console.log(error)\n    // // });\n    // const data = await response.json();\n    // console.log(data);   \n    // if(data){\n    //   this.setState({\n    //     loginsituation:true\n    //   })\n    // }\n    this.setState({\n      loginsituation: true // loginerror: true\n\n    });\n\n    if (!this.state.loginsituation) {\n      let user = {\n        username: \"\",\n        password: \"\"\n      };\n      this.setState({\n        user\n      });\n    }\n\n    let products = [];\n\n    for (let i = 0; i < 6; i++) {\n      products[i] = {\n        key: i,\n        barcode: \"\",\n        count: \"\",\n        product_name: \"\",\n        supplier_Name: \"\",\n        selling_Price: \"\"\n      };\n    }\n\n    this.setState({\n      products\n    });\n  }\n\n  inputProductCount(key, e) {\n    let count = e.target.value;\n    let products = this.state.products;\n    products.map(item => {\n      if (item.key === key) {\n        item.count = count;\n      }\n\n      return item;\n    });\n    this.setState({\n      products\n    });\n  }\n\n  async transactionDone() {\n    // ​\n    // let q =  new FormData();\n    // q.append(\"data\", this.state.product);\n    // console.log(q.json());\n    console.log(`${JSON.stringify(this.state.products)}`);\n    const url = `http://localhost:58423/Terminal/PutProducts/${this.state.products}`;\n    const settings = {\n      method: \"POST\",\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'multipart/form-data',\n        // ​\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Credentials': true,\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, HEAD',\n        'Access-Control-Allow-Headers': 'origin, content-type, accept, authorization'\n      },\n      //  redirect: 'follow', \n      //  referrerPolicy: 'no-referrer',\n      body: this.state.products\n    };\n    const response = await fetch(url, settings); // .catch((error)=>{\n    //   console.log(error)\n    // });\n\n    const data = await response.json();\n    let products = []; // ​\n\n    for (let i = 0; i < 6; i++) {\n      products[i] = {\n        key: i,\n        barcode: \"\",\n        count: \"\",\n        product_name: \"\",\n        supplier_Name: \"\",\n        selling_Price: \"\"\n      };\n    }\n\n    this.setState({\n      products\n    });\n  }\n\n  transactionCanceled() {\n    console.log(\"jhjjh\");\n  }\n\n  render() {\n    const loginsituation = this.state.loginsituation;\n    return React.createElement(React.Fragment, null, !loginsituation ? React.createElement(Login, {\n      handleUsernameInput: this.handleUsernameInput,\n      handlePasswordInput: this.handlePasswordInput,\n      Login: this.Login,\n      user: this.state.user,\n      loginerror: this.state.loginerror,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }) : React.createElement(TodoTerminal, {\n      handleBarcodeInput: this.handleBarcodeInput,\n      products: this.state.products,\n      inputProductCount: this.inputProductCount,\n      inputGivenMoney: this.inputGivenMoney,\n      transactionDone: this.transactionDone,\n      barcodes: this.state.barcodes,\n      transactionCanceled: this.state.transactionCanceled,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Help Systems/terminal/src/App.js"],"names":["React","Login","TodoTerminal","App","Component","constructor","props","handleUsernameInput","e","user","state","username","target","value","setState","handlePasswordInput","password","inputGivenMoney","givenmoney","loginsituation","products","prod_count","product_trans","loginerror","barcodes","bind","handleBarcodeInput","inputProductCount","transactionDone","key","console","log","barcode","map","item","data","length","count","product_name","supplier_Name","selling_Price","i","JSON","stringify","url","settings","method","headers","Accept","body","response","fetch","json","transactionCanceled","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Login from \"./components/Login\";\nimport TodoTerminal from \"./components/TodoTerminal\";\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      user:{username:\"\",password:\"\"},\n      loginsituation: false,\n      products:[],\n      prod_count:0,\n      product_trans:{},\n      givenmoney:\"\",\n      loginerror: false, \n      barcodes: {}\n    }\n    this.Login = this.Login.bind(this);\n    this.handleBarcodeInput = this.handleBarcodeInput.bind(this);\n    this.inputProductCount = this.inputProductCount.bind(this);\n    this.transactionDone = this.transactionDone.bind(this);\n  }\n  \n  handleUsernameInput = (e) => {\n    let user = this.state.user;\n    user.username =e.target.value;\n\n    this.setState({\n      user\n    });\n  }\n\n  handlePasswordInput = (e) => {\n    let user = this.state.user;    \n    user.password = e.target.value;\n\n    this.setState({\n      user\n    });\n    \n  }\n\n  async handleBarcodeInput(key,e) {\n\n    console.log(e.key)\n\n\n    let barcode = e.target.value;\n    let products =  this.state.products;\n    let product_trans = this.state.product_trans;\n\n    products.map(item=>{\n      if(item.key === key) {\n        item.barcode = barcode;\n      }    \n      return item;\n    });\n\n    this.setState({\n      products\n    });\n\n    \n    \n        this.setState({\n          barcodes:data,\n        \n      })\n  \n    \n    \n    if (products[products.length -1].barcode !== \"\") {\n      products[products.length] = {key:products.length,barcode:\"\",count:\"\", product_name:\"\", supplier_Name:\"\", selling_Price:\"\"};\n    }   \n\n    this.setState({\n      products\n    });\n\n  }\n\n\n  async Login() {\n  //  const user = this.state.user;\n\n      // console.log(JSON.stringify(this.state.user));\n      // const url = `http://localhost:58423/Terminal/Login/${JSON.stringify (this.state.user)}`;\n      // const settings = {\n      //   method: \"POST\",\n      //   headers: {\n      //       Accept: 'application/json',\n      //       'Content-Type': 'application/json',\n\n      //       'Access-Control-Allow-Origin': '*',\n      //       'Access-Control-Allow-Credentials': true,\n      //       'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, HEAD',\n      //       'Access-Control-Allow-Headers': 'origin, content-type, accept, authorization',\n      //    },\n      // //  redirect: 'follow', \n      // //  referrerPolicy: 'no-referrer',\n      //   body: `${this.state.user}`\n      // };\n      // const response = await fetch(url,settings);\n      // // .catch((error)=>{\n      // //   console.log(error)\n      // // });\n      // const data = await response.json();\n      // console.log(data);   \n  \n      // if(data){\n      //   this.setState({\n      //     loginsituation:true\n      //   })\n      // }\n    \n\n    this.setState({\n      loginsituation:true\n      // loginerror: true\n    });\n\n    if(!this.state.loginsituation){\n    let  user = {username:\"\",password:\"\"};\n      this.setState({\n        user\n      });\n    }\n    \n    let products = [];\n    for (let i = 0; i < 6; i++) {\n     products[i] = {key:i,barcode:\"\",count:\"\", product_name:\"\", supplier_Name:\"\", selling_Price:\"\"};\n    }\n    this.setState({\n      products\n    })\n  }\n\n  inputProductCount(key,e) {\n    let count = e.target.value;\n    let products =  this.state.products;\n    products.map(item=>{\n      if(item.key === key) {\n        item.count = count;\n      }    \n      return item;\n    });\n    this.setState({\n      products\n    })\n  }\n\n  inputGivenMoney = (e) => {\n    const givenmoney = e.target.value;\n    this.setState({\n      givenmoney\n    });\n  }\n  \n  async transactionDone () {\n// ​\n    // let q =  new FormData();\n    // q.append(\"data\", this.state.product);\n    // console.log(q.json());\n  \n    console.log(`${JSON.stringify (this.state.products)}`);\n    const url = `http://localhost:58423/Terminal/PutProducts/${this.state.products}`;\n    const settings = {\n    method: \"POST\",\n    headers: {\n        Accept: 'application/json',\n        'Content-Type': 'multipart/form-data',\n// ​\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Credentials': true,\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, HEAD',\n        'Access-Control-Allow-Headers': 'origin, content-type, accept, authorization',\n    },\n      //  redirect: 'follow', \n      //  referrerPolicy: 'no-referrer',\n      body: this.state.products\n    };\n    const response = await fetch(url,settings);\n    // .catch((error)=>{\n    //   console.log(error)\n    // });\n    const data = await response.json();\n   \n    \n    let products = []; \n// ​\n    for (let i = 0; i < 6; i++) {\n      products[i] = {key:i,barcode:\"\",count:\"\", product_name:\"\", supplier_Name:\"\", selling_Price:\"\"};\n    }\n    \n    this.setState({\n      products      \n    })\n  }\n\n  transactionCanceled(){\n    console.log(\"jhjjh\")\n  }\n\n  render() {\n    const loginsituation = this.state.loginsituation;\n    return (\n      <>\n      {\n        !loginsituation ?\n          <Login\n            handleUsernameInput = {this.handleUsernameInput}\n            handlePasswordInput = {this.handlePasswordInput}\n            Login = {this.Login}\n            user = {this.state.user}\n            loginerror = {this.state.loginerror}\n         />\n        :\n          <TodoTerminal\n            handleBarcodeInput = {this.handleBarcodeInput}\n            products = {this.state.products}\n            inputProductCount = {this.inputProductCount}\n            inputGivenMoney = {this.inputGivenMoney}\n            transactionDone = {this.transactionDone}\n            barcodes = {this.state.barcodes}\n            transactionCanceled = {this.state.transactionCanceled}\n          />\n      }\n      </>      \n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}